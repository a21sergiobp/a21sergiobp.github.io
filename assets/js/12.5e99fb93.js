(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{284:function(e,a,s){"use strict";s.r(a);var o=s(14),r=Object(o.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"javabean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javabean"}},[e._v("#")]),e._v(" JavaBean")]),e._v(" "),a("p",[e._v("Un JavaBean (ou Bean) é un compoñente software que se pode reutilizar e que pode ser\nmanipulado visualmente por unha ferramenta de programación en linguaxe Java. Para isto\nten unha interface que permite ao IDE interrogar o compoñente e coñecer as propiedades\nque define e os tipos de eventos que pode xerar en resposta a diversas accións.")]),e._v(" "),a("h2",{attrs:{id:"caracteristicas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#caracteristicas"}},[e._v("#")]),e._v(" Características")]),e._v(" "),a("h3",{attrs:{id:"persistencia"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#persistencia"}},[e._v("#")]),e._v(" Persistencia")]),e._v(" "),a("p",[e._v("Debe poder gardarse o estado do Bean unha vez foi personalizado\npola persoa programadora, é dicir, despois de cambiar os valores das súas\npropiedades.")]),e._v(" "),a("h3",{attrs:{id:"introspeccion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#introspeccion"}},[e._v("#")]),e._v(" Introspección")]),e._v(" "),a("p",[e._v("Debe permitir ao IDE poder recoñecer certos elementos de deseño\ncomo os nomes das propiedades, xunto co tipo de datos e os métodos.")]),e._v(" "),a("h3",{attrs:{id:"personalizacion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#personalizacion"}},[e._v("#")]),e._v(" Personalización")]),e._v(" "),a("p",[e._v("A aparencia e conduta do Bean pode ser alterada pola persoa\nprogramadora mediante os cambios dos valores nas propiedades.")]),e._v(" "),a("h3",{attrs:{id:"eventos"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eventos"}},[e._v("#")]),e._v(" Eventos")]),e._v(" "),a("p",[e._v("Debe informar ao IDE dos sucesos que pode xerar en resposta ás accións\ndas persoas usuarias e tamén os eventos que pode manexar.")]),e._v(" "),a("h2",{attrs:{id:"persistencia-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#persistencia-2"}},[e._v("#")]),e._v(" Persistencia")]),e._v(" "),a("p",[e._v("A persistencia é a característica dunha clase que permite almacenar o estado para que\nperdure a través do tempo. Para implementala, é necesario que poida ser almacenada nun\narquivo e recuperada posteriormente.")]),e._v(" "),a("p",[e._v("Para que a serialización sexa automática, o compoñente debe implementar a interface\nSerializable, que proporciona serialización automática mediante a utilización das\nferramentas de Java Object Serialization.")]),e._v(" "),a("h2",{attrs:{id:"propiedades"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#propiedades"}},[e._v("#")]),e._v(" Propiedades")]),e._v(" "),a("p",[e._v("Unha propiedade é un atributo do JavaBean que afecta á súa aparencia ou á súa conduta.\nPor exemplo, un botón pode ter as seguintes propiedades: tamaño, posición, cor de fondo,\ncor de texto, habilitado ou non, etc.")]),e._v(" "),a("p",[e._v("Un compoñente ten definido o seu estado a partir dun conxunto de propiedades. As\npropiedades son variables definidas por un nome e un tipo de datos e toman valores\nconcretos. Normalmente as propiedades son privadas e non se ven dende fora da clase que\nimplementa o compoñente.")])])}),[],!1,null,null,null);a.default=r.exports}}]);